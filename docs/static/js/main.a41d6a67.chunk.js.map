{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","divRoot","document","querySelector","ReactDOM","render"],"mappings":"mMAgCeA,EA7BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAcvC,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,GAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,KAIlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAfc,SAACP,GAAD,OAAQF,EAAcE,EAAEQ,OAAOF,a,+BCNhDG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAQ,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCYLO,EAXK,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAE9B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCkBFO,EArBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAN,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAZAC,qBAAW,WAEPxB,EAAQC,GACHwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAEGqB,EDjB0BK,CAAc1B,GAAlCa,EAFiB,EAEtBN,KAAaa,EAFS,EAETA,QAErB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GACR,OAAO,cAAC,EAAD,eAAiCA,GAAdA,EAAIC,aEQvCgB,EArBM,WAAO,IAAD,EAEazC,mBAAS,CAAC,cAFvB,mBAEhB0C,EAFgB,KAEJ3C,EAFI,KAIvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GACZ,OAAO,cAAC,EAAD,CAA0BA,SAAWA,GAAtBA,YCZxC6B,G,MAAUC,SAASC,cAAc,UAEvCC,IAASC,OAAQ,cAAC,EAAD,IAAkBJ,K","file":"static/js/main.a41d6a67.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) =>  setInputValue(e.target.value)\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2)\r\n            setCategories( cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory","\r\nexport const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=8Z3ak7URwLr2NJe6sGHlyA7JU91MargL`\r\n    const resp = await fetch( url )\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return  {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n} ","import React from 'react'\r\n\r\nconst GifGridItem = ({ id, title, url }) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default GifGridItem","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => {\r\n                        return <GifGridItem key={ img.id } { ...img }/>\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n \r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        \r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n\r\n    }, [category])\r\n\r\n    return state;\r\n\r\n}","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => {\r\n                        return <GifGrid key={ category } category={ category } />\r\n                    })\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp'\nimport './index.css';\n\nconst divRoot = document.querySelector('#root');\n\nReactDOM.render( <GifExpertApp />, divRoot );"],"sourceRoot":""}